package process

import (
	"fmt"
	"os"
	"log"
	"strings"
	"html/template"
)

var EnvVars = []string{
	"GOARCH",
	"GOOS",
	"GOFILE",
	"GOLINE",
	"GOPACKAGE",
	"DOLLAR",
}

func Sep() string {
	return strings.Repeat("-", 80)
}

func ShowEnvironment() {
	for k,v := range BuildEnv() {
		fmt.Printf("%s : %s\n", k, v)
	}
	for i,e := range os.Args {
		fmt.Printf("os.Args[%d] = %s\n", i, e)
	}
}

type Env map[string]interface{}

func (e Env) String(key string) string {
	g,ok := e[key]
	if !ok {
		return ""
	}
	s,ok := g.(string)
	if ok {
		return s
	} else {
		return ""
	}
}

func BuildEnv() Env {
	m := make(Env)

	for _,e := range EnvVars {
		m[e] = os.Getenv(e)
	}
	if p,ok := m["GOPACKAGE"]; !ok || p == "" {
		m["GOPACKAGE"] = "main"
	}
	s, err := os.Getwd()
	if err != nil {
		log.Fatal(err)
	}
	m["CWD"] = s
	m["Args"] = os.Args
	m["GEN_TAGLINE"] = fmt.Sprintf(
		"// Generated by %s -- do not edit this file.",
		os.Args[0])

	return m
}

func BuildFuncMap() template.FuncMap {
	return template.FuncMap{
		"title": toPascal,
		"lower": strings.ToLower,
		"getenv": os.Getenv,
	}
}

func BuildData(pairs Env) Env {
	env := make(Env)
	for k,v := range BuildEnv() {
		env[k] = v
	}
	pairs["ENV"] = env
	return pairs
}

