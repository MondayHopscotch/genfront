package examples
// Generated by genfront -- do not edit this file.

import (
	"errors"
	"fmt"
	"strings"
)

// Methods for the Rest state
func (r *Effort) ToMap() map[string]interface{} {
  m := make(map[string]interface{})
  m["Id"] = r.Id
  m["Title"] = r.Title
  m["Summary"] = r.Summary
  m["Description"] = r.Description
  m["CreatedBy"] = r.CreatedBy
  m["CreatedOn"] = r.CreatedOn
  m["UpdatedBy"] = r.UpdatedBy
  m["UpdatedOn"] = r.UpdatedOn
  m["OwnedBy"] = r.OwnedBy
  m["State"] = r.State
  m["RecordStatus"] = r.RecordStatus
  return m
}

// Private function (to this fil).  Don't use this function
// directly, it's intended for use only in this file.
func __snakeToPascal(sk string) string {
	parts := strings.Split(sk, "_")
	for i,p := range parts {
		parts[i] = strings.Title(p)
	}
	return strings.Join(parts, "")
}


// Fills pointer array with pointers to receiver fields.
func (e *Effort) FromColumns(cols []string, ptrs []interface{}) error {
	if len(cols) != len(ptrs) {
		return errors.New("Column length doesn't equal pointer array length")
	}
	snakeToPascal := __snakeToPascal
	for i,c := range cols {
		pascal := snakeToPascal(c)
		switch pascal { 
		case "Id":
			ptrs[i] = &e.Id
		case "Title":
			ptrs[i] = &e.Title
		case "Summary":
			ptrs[i] = &e.Summary
		case "Description":
			ptrs[i] = &e.Description
		case "CreatedBy":
			ptrs[i] = &e.CreatedBy
		case "CreatedOn":
			ptrs[i] = &e.CreatedOn
		case "UpdatedBy":
			ptrs[i] = &e.UpdatedBy
		case "UpdatedOn":
			ptrs[i] = &e.UpdatedOn
		case "OwnedBy":
			ptrs[i] = &e.OwnedBy
		case "State":
			ptrs[i] = &e.State
		case "RecordStatus":
			ptrs[i] = &e.RecordStatus
		default:
			return errors.New(fmt.Sprintf(
				"Provided a column that doesn't exist in structure: %s",
				c))
		}
	}
	return nil
}